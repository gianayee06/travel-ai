import os
from openai import OpenAI
from dotenv import load_dotenv

# load environment variables from .env
load_dotenv()

# create openAI client using API key
client = OpenAI(
    api_key=os.getenv("OPENAI_API_KEY"),
    project=os.getenv("OPENAI_PROJECT_ID")
)


# connects our app to openAI
# functions::
#   Generate text
#   Summarizing text
#   Analyzing sentiment
#
# Instead of writing openAI code over and over just call:
#     summarize_text("some text here")


# -------- BASIC TEXT GENERATOR ----------------------------
# receives string which is user prompt,*temperature is house creative/rational ai is (1=creative/, 0=rational)
def generate_text(prompt: str, model: str = "gpt-4o-mini", temperature: float = 0.7) -> str:
    """
    This function sends a prompt (message) to OpenAI and returns the AI's response.
    parameters:
    - prompt (str): what the user wants the AI to respond to (example: "Write a haiku about space")
    - model (str): which AI model to use
    - temperature (float): controls how "creative" the AI is
    returns:
    - text generated by the AI as a string.
    """
    try:
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "You are a helpful AI assistant."}, #System message, defines AI's behavior
                {"role": "user", "content": prompt} #User message, what we say to the AI
            ],
            temperature=temperature
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        print("Error:", e)
        return "Error generating text."

# -------- SUMMARIZATION --------
def summarize_text(text: str, max_words: int = 100) -> str:
    """
    This function uses the AI to summarize long text into a shorter version.
    parameters:
    - text (str): the long text you want summarized
    - max_words (int): how short the summary should be (default 100 words)
    returns:
    - A summarized version of your text as a string.
    """
    prompt = f"Summarize this text in under {max_words} words:\n\n{text}"
    return generate_text(prompt, temperature=0.3)

# -------- SENTIMENT ANALYSIS --------
def analyze_sentiment(text: str) -> str:
    """
    This function checks the emotional tone (sentiment) of a piece of text.
    It returns "Positive", "Negative", or "Neutral"
    parameter:
    - text (str): the text to analyze
    returns:
    - One of three possible labels: Positive / Negative / Neutral
    """
    prompt = f"Classify the sentiment of this text (Positive, Negative, or Neutral):\n\n{text}"
    return generate_text(prompt, temperature=0.0)



# -------- ECO-FRIENDLY FLIGHT OPTIONS --------
# Takes origin, destination, date, if client is eco-friendly and returns flight options
def generate_flight_options(
    origin: str,
    destination: str,
    startDate: str,
    endDate: str,
    travelers: int,
    budget: float,
    mood: str,
    pace: str,
    econ: bool = False
) -> str:
    """
    Uses OpenAI to suggest flight options based on user preferences.

    Parameters:
    - origin (str): Departure city or airport code.
    - destination (str): Arrival city or airport code.
    - startDate (str): Departure date (YYYY-MM-DD).
    - endDate (str): Return date (YYYY-MM-DD).
    - travelers (int): Number of people traveling.
    - budget (float): Total trip budget in USD.
    - mood (str): Overall vibe of the trip. 
        Options: "balanced", "relaxed", "adventure", "culture", "romantic", "surprise".
    - pace (str): How busy the trip should feel. 
        Options: "relaxed", "balanced", "packed".
    - econ (bool): If True, prioritize eco-friendly flight options.

    Returns:
    - str: AI-generated list of flight suggestions.
    """

    # Choose how to sort flight options
    if econ:
        sort_instruction = (
            "List the most eco-friendly flight options first (based on lower COâ‚‚ emissions), "
            "then the rest ordered from cheapest to most expensive."
        )
    else:
        sort_instruction = "List all flight options from cheapest to most expensive."

    # Craft AI prompt dynamically
    prompt = f"""
    You are a travel assistant helping plan flights for a {mood} trip with a {pace} pace.

    Traveler details:
    - Origin: {origin}
    - Destination: {destination}
    - Dates: Depart on {startDate}, return on {endDate}
    - Number of travelers: {travelers}
    - Total budget: ${budget} USD
    - Mood: {mood}
    - Pace: {pace}

    Please suggest flight options that best fit these preferences.
    Include:
    - Airline name
    - Departure time
    - Arrival time
    - Estimated price in USD
    - A short note on why this option matches the traveler's {mood} mood and {pace} pace

    {sort_instruction}

    Return results as a neat, numbered list (1., 2., 3., etc.).
    """

    # Generate using your helper
    return generate_text(prompt, temperature=0.5)


def generate_hotel_options(
    origin: str,
    destination: str,
    startDate: str,
    endDate: str,
    travelers: int,
    budget: float,
    mood: str,
    pace: str,
    econ: bool = False
) -> str:
    """
    Uses OpenAI to suggest hotel options that fit the user's preferences and total trip budget.

    Parameters:
    - origin (str): Departure city or airport code.
    - destination (str): City where the hotel will be booked.
    - startDate (str): Check-in date (YYYY-MM-DD).
    - endDate (str): Check-out date (YYYY-MM-DD).
    - travelers (int): Number of people traveling.
    - budget (float): Total trip budget in USD (includes both flight + hotel).
    - mood (str): Trip theme. Options: "balanced", "relaxed", "adventure", "culture", "romantic", "surprise".
    - pace (str): Trip intensity. Options: "relaxed", "balanced", "packed".
    - econ (bool): If True, prioritize eco-friendly accommodations.

    Returns:
    - str: AI-generated list of hotel suggestions.
    """

    if econ:
        eco_instruction = (
            "Prefer eco-certified or sustainable hotels that use renewable energy or have green initiatives."
        )
    else:
        eco_instruction = "Eco-friendliness is not a priority."

    # Dynamic prompt with budgeting logic
    prompt = f"""
    You are a travel assistant helping select hotels in {destination} for a {mood} trip with a {pace} pace.

    The total trip budget (including both flights and hotel) is ${budget} USD.
    Assume the travelers have already spent approximately 60% of the budget on flights.
    The remaining 40% should cover hotels and must not exceed it.

    Traveler details:
    - Destination: {destination}
    - Origin: {origin}
    - Dates: Check-in {startDate}, check-out {endDate}
    - Number of travelers: {travelers}
    - Mood: {mood}
    - Pace: {pace}

    Please recommend hotels that fit these preferences and budget constraints.
    Include:
    - Hotel name
    - Star rating or property type
    - Neighborhood or location vibe
    - Price per night in USD and total estimated stay cost
    - Short note explaining how it matches the {mood} mood and {pace} pace
    - Mention eco-friendliness if relevant

    {eco_instruction}

    Return results as a clean, numbered list (1., 2., 3., etc.).
    """

    return generate_text(prompt, temperature=0.6)


def generate_itinerary(
    origin: str,
    destination: str,
    startDate: str,
    endDate: str,
    travelers: int,
    budget: float,
    mood: str,
    pace: str,
    econ: bool = False
) -> str:
    """
    Uses OpenAI to generate a personalized travel itinerary based on trip parameters.

    Parameters:
    - origin (str): Departure city or airport code.
    - destination (str): Trip destination city.
    - startDate (str): Start date of the trip (YYYY-MM-DD).
    - endDate (str): End date of the trip (YYYY-MM-DD).
    - travelers (int): Number of travelers.
    - budget (float): Total budget in USD (includes flights + hotels + activities).
    - mood (str): Trip theme. Options: "balanced", "relaxed", "adventure", "culture", "romantic", "surprise".
    - pace (str): Trip intensity. Options: "relaxed", "balanced", "packed".
    - econ (bool): If True, prefer sustainable or local experiences.

    Returns:
    - str: AI-generated daily itinerary in text format.
    """

    if econ:
        eco_instruction = (
            "Prioritize sustainable activities such as local tours, walking experiences, or nature-friendly options."
        )
    else:
        eco_instruction = "Eco-friendliness is optional but still appreciated."

    # Budget logic
    # Assume flights and hotels consume about 80% of total budget.
    # Only ~20% remains for activities, food, and attractions.
    activity_budget = budget * 0.2

    # AI prompt for itinerary generation
    prompt = f"""
    You are a travel assistant helping plan a {mood} trip with a {pace} pace to {destination}.

    Trip details:
    - Origin: {origin}
    - Destination: {destination}
    - Dates: {startDate} to {endDate}
    - Number of travelers: {travelers}
    - Total budget: ${budget} USD (including flights, hotels, and activities)
    - Remaining budget for activities and experiences: ${activity_budget:.2f} USD
    - Mood: {mood}
    - Pace: {pace}

    Create a detailed daily itinerary that fits the {mood} and {pace} style.
    Include:
    - Morning, afternoon, and evening plans for each day
    - Approximate cost per day in USD (must stay under total remaining budget)
    - Mix of sightseeing, dining, and relaxation appropriate to the trip mood
    - Mention eco-friendly or local experiences if relevant
    - Avoid repeating similar activities

    {eco_instruction}

    Return the itinerary as a clean, day-by-day schedule (Day 1, Day 2, etc.).
    """

    return generate_text(prompt, temperature=0.7)




# ------------------ TEST THE FILE DIRECTLY -------------------
# This section runs only when you type:
#     python ai_helpers.py
# in the terminal.
# It lets you quickly test the functions before integrating them into your app.
if __name__ == "__main__":
    itinerary = generate_itinerary(
        origin="San Francisco",
        destination="Lisbon",
        startDate="2025-06-01",
        endDate="2025-06-10",
        travelers=2,
        budget=4000,
        mood="romantic",
        pace="balanced",
        econ=True
    )
    print(itinerary)