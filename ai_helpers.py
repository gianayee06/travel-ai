import os
from openai import OpenAI
from dotenv import load_dotenv

# load environment variables from .env
load_dotenv()

# create openAI client using API key
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))


# connects our app to openAI
# functions::
#   Generate text
#   Summarizing text
#   Analyzing sentiment
#
# Instead of writing openAI code over and over just call:
#     summarize_text("some text here")


# -------- BASIC TEXT GENERATOR ----------------------------
# receives string which is user prompt,*temperature is house creative/rational ai is (1=creative/, 0=rational)
def generate_text(prompt: str, model: str = "gpt-4o-mini", temperature: float = 0.7) -> str:
    """
    This function sends a prompt (message) to OpenAI and returns the AI's response.
    parameters:
    - prompt (str): what the user wants the AI to respond to (example: "Write a haiku about space")
    - model (str): which AI model to use
    - temperature (float): controls how "creative" the AI is
    returns:
    - text generated by the AI as a string.
    """
    try:
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "You are a helpful AI assistant."}, #System message, defines AI's behavior
                {"role": "user", "content": prompt} #User message, what we say to the AI
            ],
            temperature=temperature
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        print("Error:", e)
        return "Error generating text."

# -------- SUMMARIZATION --------
def summarize_text(text: str, max_words: int = 100) -> str:
    """
    This function uses the AI to summarize long text into a shorter version.
    parameters:
    - text (str): the long text you want summarized
    - max_words (int): how short the summary should be (default 100 words)
    returns:
    - A summarized version of your text as a string.
    """
    prompt = f"Summarize this text in under {max_words} words:\n\n{text}"
    return generate_text(prompt, temperature=0.3)

# -------- SENTIMENT ANALYSIS --------
def analyze_sentiment(text: str) -> str:
    """
    This function checks the emotional tone (sentiment) of a piece of text.
    It returns "Positive", "Negative", or "Neutral"
    parameter:
    - text (str): the text to analyze
    returns:
    - One of three possible labels: Positive / Negative / Neutral
    """
    prompt = f"Classify the sentiment of this text (Positive, Negative, or Neutral):\n\n{text}"
    return generate_text(prompt, temperature=0.0)


# -------- TRAVEL ITINERARY GENERATOR --------
# Takes a destination string and returns a fun 3-day itinerary
def generate_trip_idea(destination: str) -> str:
    prompt = f"Suggest a fun 3-day travel itinerary for {destination}."
    return generate_text(prompt, temperature=0.9)


# -------- ECO-FRIENDLY FLIGHT OPTIONS --------
# Takes origin, destination, date, if client is eco-friendly and returns flight options
def generate_flight_options(origin: str, destination: str, date: str, econ: bool = False) -> str:
    if econ:
        sort_instruction = (
            "List the most eco-friendly flight options first (based on lower COâ‚‚ emissions), "
            "then the rest ordered from cheapest to most expensive."
        )
    else:
        sort_instruction = "List all flight options from cheapest to most expensive."

    prompt = f"""
    You are a travel assistant. Find flight options from {origin} to {destination} on {date}.
    Include airline name, departure time, arrival time, and estimated price in USD.
    {sort_instruction}
    Return the results in a neat, numbered list.
    """
    return generate_text(prompt, temperature=0.4)


# ------------------ TEST THE FILE DIRECTLY -------------------
# This section runs only when you type:
#     python ai_helpers.py
# in the terminal.
# It lets you quickly test the functions before integrating them into your app.
if __name__ == "__main__":
    sample = "I love coding with my teammates, it makes learning fun!" # this is the prompt text
    print("Summary:", summarize_text(sample))
    print("Sentiment:", analyze_sentiment(sample))